from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from database import (
    add_product, remove_product, edit_price, get_products,
    get_orders, update_order_status, remove_order,
    add_admin, remove_admin, get_admins, is_admin, is_super_admin, set_super_admin
)

admin_router = Router()

### üîπ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ –¢–û–í–ê–†–ê
@admin_router.message(Command("edit_price"))
async def edit_price_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        product_id, new_price = map(int, message.text.split()[1:3])
        edit_price(product_id, new_price)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å ID `{product_id}` –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{new_price}‚ÇΩ**.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/edit_price product_id –Ω–æ–≤–∞—è_—Ü–µ–Ω–∞`")


### üîπ –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –ó–ê–ö–ê–ó–û–í
@admin_router.message(Command("orders"))
async def list_orders_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    orders = get_orders()
    if not orders:
        await message.answer("‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
    else:
        order_list = "\n".join([f"üì¶ **–ó–∞–∫–∞–∑ #{o[0]}** ‚Äì {o[1]}‚ÇΩ, **–°—Ç–∞—Ç—É—Å:** {o[2]}" for o in orders])
        await message.answer(f"üìú **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n{order_list}")


### üîπ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
@admin_router.message(Command("update_order"))
async def update_order_status_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        args = message.text.split(maxsplit=2)
        order_id, new_status = int(args[1]), args[2]
        update_order_status(order_id, new_status)
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ **#{order_id}** –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{new_status}**.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/update_order order_id –Ω–æ–≤—ã–π_—Å—Ç–∞—Ç—É—Å`")


### üîπ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê
@admin_router.message(Command("remove_order"))
async def remove_order_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        order_id = int(message.text.split()[1])
        remove_order(order_id)
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ **#{order_id}** —É–¥–∞–ª–µ–Ω.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/remove_order order_id`")


### üîπ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê)
@admin_router.message(Command("add_admin"))
async def add_admin_handler(message: Message):
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
        add_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/add_admin user_id`")


### üîπ –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
@admin_router.message(Command("remove_admin"))
async def remove_admin_handler(message: Message):
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
        if is_super_admin(user_id):
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        else:
            remove_admin(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/remove_admin user_id`")


### üîπ –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
@admin_router.message(Command("admins"))
async def admins_handler(message: Message):
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    admins = get_admins()
    if not admins:
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.")
        return

    text = "üë§ **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n"
    for user_id, is_super in admins:
        text += f"‚Ä¢ `{user_id}` {'(–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω)' if is_super else ''}\n"

    await message.answer(text)


### üîπ –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –¢–û–í–ê–†–û–í
@admin_router.message(Command("products"))
async def list_products_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    products = get_products()
    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        product_list = "\n".join([f"üì¶ **{p[0]}** ‚Äì {p[1]}, **–¶–µ–Ω–∞:** {p[2]}‚ÇΩ" for p in products])
        await message.answer(f"üõí **–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:**\n{product_list}")


### üîπ –£–°–¢–ê–ù–û–í–ö–ê –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê (–û–î–ò–ù –†–ê–ó)
@admin_router.message(Command("set_super_admin"))
async def set_super_admin_handler(message: Message):
    if set_super_admin(message.from_user.id):
        await message.answer("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    else:
        await message.answer("‚ö†Ô∏è –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
