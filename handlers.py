import logging
import time

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, \
    FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command

from config import PAYMENT_TOKEN
from database import get_products_of_category_id, add_to_cart, get_cart, create_order, remove_from_cart, get_categories, \
    get_product, get_category_name, delete_full_cart
from keyboards import main_menu

router = Router()


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ /START
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá", reply_markup=main_menu)


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ "–ö–∞—Ç–∞–ª–æ–≥"
@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_command(message: Message):
    categories = get_categories()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        category_id, name = category
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=name, callback_data=f"category_{category_id}")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


### üîπ –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_"))
async def show_products(callback: CallbackQuery):
    _, category_id = callback.data.split("_")
    category_id = int(category_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = get_products_of_category_id(category_id)
    category_name = get_category_name(category_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for product in products:
        product_id = product[0]
        name= product[1]
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=name, callback_data=f"product_{product_id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    _, product_id = callback.data.split("_")
    product_id = int(product_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = get_product(product_id)[0]
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    product_id, name, price, category_id, description, photo_path = product
    category_name = get_category_name(category_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_{product_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_products__{category_id}")]
    ])

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        photo = FSInputFile(photo_path)

        await callback.message.answer_photo(
            photo=photo,
            caption=(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
                f"–¢–æ–≤–∞—Ä: {name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–¶–µ–Ω–∞: {price}‚ÇΩ"
            ),
            reply_markup=keyboard
        )
        await callback.message.delete()
    except FileNotFoundError:
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
            f"–¢–æ–≤–∞—Ä: {name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"‚ö†Ô∏è –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
            f"–¢–æ–≤–∞—Ä: {name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
            reply_markup=keyboard
        )

    await callback.answer()


### üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    categories = get_categories()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        category_id, name = category
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=name, callback_data=f"category_{category_id}")])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


### üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Ç–æ–≤–∞—Ä–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("back_to_products__"))
async def back_to_products(callback: CallbackQuery):
    _, category_id = callback.data.split("__")
    category_id = int(category_id)

    products = get_products_of_category_id(category_id)
    category_name = get_category_name(category_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for product in products:
        product_id = product[0]
        name = product[1]
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=name, callback_data=f"product_{product_id}")]
        )

    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")]
    )

    await callback.message.delete()
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö "–î–û–ë–ê–í–ò–¢–¨" –ò "–£–î–ê–õ–ò–¢–¨"
@router.callback_query(F.data.startswith("add_") | F.data.startswith("remove_"))
async def update_cart_handler(callback: CallbackQuery):
    action, product_id = callback.data.split("_")
    product_id = int(product_id)

    if action == "add":
        add_to_cart(callback.from_user.id, product_id)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    elif action == "remove":
        remove_from_cart(callback.from_user.id, product_id)
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω!")


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@router.callback_query(F.data == "refresh_cart")
async def cart_command(event):
    user_id = event.from_user.id
    cart_items = get_cart(user_id)

    if not cart_items:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(text) if event.message.text != text else await event.answer()
        else:
            await event.answer(text)
        return

    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_price = 0

    for idx, (name, quantity, price, product_id) in enumerate(cart_items, 1):
        item_total = quantity * price
        total_price += item_total
        cart_text += (
            f"<b>{idx}. {name}</b>\n"
            f"   √ó {quantity} —à—Ç. | {price}‚ÇΩ/—à—Ç. | <b>{item_total}‚ÇΩ</b>\n\n"
        )

    cart_text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ</b>"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    keyboard_buttons = []
    for product_name, _, _, product_id in cart_items:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {product_name}",
                callback_data=f"remove_{product_id}"
            )
        ])

    keyboard_buttons.extend([
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cart"),
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="checkout")
        ],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if isinstance(event, CallbackQuery):
        try:
            await event.message.edit_text(
                cart_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await event.answer()
    else:
        await event.answer(
            cart_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    delete_full_cart(user_id)
    await cart_command(callback)


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê "–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó"
@router.callback_query(F.data == "checkout")
async def process_checkout(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart_items = get_cart(user_id)

    if not cart_items:
        await callback.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ —Ä—É–±–ª—è—Ö)
    total_price = sum(quantity * price for _, quantity, price, _ in cart_items)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –Æ–∫–∞—Å—Å—ã (1 —Ä—É–±–ª—å)
    if total_price < 1:
        await callback.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 1 —Ä—É–±–ª—å!", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    description = "–í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(
        f"{name} √ó {quantity} —à—Ç." for name, quantity, _, _ in cart_items
    )[:255]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —á–µ–∫–∞ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Æ–∫–∞—Å—Å—ã)
    prices = [
        LabeledPrice(
            label=f"{name} √ó {quantity}",
            amount=int(price * quantity * 100))  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–ø–µ–π–∫–∏
        for name, quantity, price, _ in cart_items
    ]

    try:
        await callback.bot.send_invoice(
            chat_id=user_id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=description,
            payload=f"order_{user_id}_{int(time.time())}",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="create_invoice",
            need_name=True,
            need_phone_number=True,
            need_email=True,
            is_flexible=False,
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error creating invoice: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–´
@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    user_id = message.from_user.id
    payment = message.successful_payment

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = create_order(
            user_id=user_id,
            phone_number=payment.order_info.phone_number,
            total_price=payment.total_amount / 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
        )

        if not order_id:
            raise Exception("Order not created")

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        delete_full_cart(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        response = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n"
            f"üí≥ –°—É–º–º–∞: {payment.total_amount / 100:.2f}‚ÇΩ\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {payment.order_info.phone_number}\n"
            f"üìß Email: {payment.order_info.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment.telegram_payment_charge_id}\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )

        await message.answer(response)

    except Exception as e:
        logging.error(f"Payment processing error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            "–î–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )


### üîπ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–£–î–ê–ß–ù–û–ô –û–ü–õ–ê–¢–´
@router.message(F.content_type == 'unsuccessful_payment')
async def process_unsuccessful_payment(message: Message):
    await message.answer(
        "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )
